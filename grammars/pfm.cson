name: 'Pandoc Markdown'
scopeName: 'source.gfm'
fileTypes: [
  'markdown'
  'md'
  'mdown'
  'mkd'
  'mkdown'
  'rmd'
  'ron'
  'pmd'
  'p.md'
]
patterns: [
  {
    include: '#block'
  }
  {
    include: '#headings'
  }
  {
    include: '#inline'
  }
  {
    include: '#code'
  }
  {
    match: '^\\s*([*+-])[ \\t]+'
    captures:
      '1':
        name: 'variable.unordered.list.gfm'
  }
  {
    match: '^\\s*(\\d+\\.)[ \\t]+'
    captures:
      '1':
        name: 'variable.ordered.list.gfm'
  }
  {
    match: '(?<=^|\\s|"|\'|\\(|\\[)(@)(\\w[-\\w:]*)(?=[\\s"\'.,;\\)\\]])'
    captures:
      '1':
        name: 'variable.mention.gfm'
      '2':
        name: 'string.username.gfm'
  }
  {
    match: '(?<=^|\\s|"|\'|\\(|\\[)(#)(\\d+)(?=[\\s"\'\\.,;\\)\\]])'
    captures:
      '1':
        name: 'variable.issue.tag.gfm'
      '2':
        name: 'string.issue.number.gfm'
  }
  {
    match: '(  )$'
    captures:
      '1':
        name: 'linebreak.gfm'
  }
]
repository:
  inline:
    patterns: [
      {
        include: '#inline-no-emphasis'
      }
      {
        include: '#emphasis-inline'
      }
    ]
  block:
    patterns: [
      {
        include: '#block-no-emphasis'
      }
      {
        include: '#emphasis-block'
      }
    ]
  'inline-no-emphasis':
    patterns: [
      {
        include: '#citations'
      }
      {
        order: 0
        match: '([_\\*]){4,}(.+?)\\1'
        captures:
          '2':
            patterns: [
              {
                include: '#inline'
              }
            ]
      }
      {
        include: '#math-inline'
      }
      {
        include: '#code-inline'
      }
      {
        match: '(\\[!)(\\[)([^\\]]*)(\\])((\\()[^\\)]+(\\)))(\\])(((\\()[^\\)]+(\\)))|((\\[)[^\\]]+(\\])))'
        name: 'link'
        captures:
          '1':
            name: 'punctuation.definition.begin.gfm'
          '2':
            name: 'punctuation.definition.begin.gfm'
          '3':
            name: 'entity.gfm'
          '4':
            name: 'punctuation.definition.end.gfm'
          '5':
            name: 'markup.underline.link.gfm'
          '6':
            name: 'punctuation.definition.begin.gfm'
          '7':
            name: 'punctuation.definition.end.gfm'
          '8':
            name: 'punctuation.definition.end.gfm'
          '10':
            name: 'markup.underline.link.gfm'
          '11':
            name: 'punctuation.definition.begin.gfm'
          '12':
            name: 'punctuation.definition.end.gfm'
          '13':
            name: 'markup.underline.link.gfm'
          '14':
            name: 'punctuation.definition.begin.gfm'
          '15':
            name: 'punctuation.definition.end.gfm'
      }
      {
        match: '(\\[!)(\\[)([^\\]]*)(\\])((\\[)[^\\)]+(\\]))(\\])(((\\()[^\\)]+(\\)))|((\\[)[^\\]]+(\\])))'
        name: 'link'
        captures:
          '1':
            name: 'punctuation.definition.begin.gfm'
          '2':
            name: 'punctuation.definition.begin.gfm'
          '3':
            name: 'entity.gfm'
          '4':
            name: 'punctuation.definition.end.gfm'
          '5':
            name: 'markup.underline.link.gfm'
          '6':
            name: 'punctuation.definition.begin.gfm'
          '7':
            name: 'punctuation.definition.end.gfm'
          '8':
            name: 'punctuation.definition.end.gfm'
          '10':
            name: 'markup.underline.link.gfm'
          '11':
            name: 'punctuation.definition.begin.gfm'
          '12':
            name: 'punctuation.definition.end.gfm'
          '13':
            name: 'markup.underline.link.gfm'
          '14':
            name: 'punctuation.definition.begin.gfm'
          '15':
            name: 'punctuation.definition.end.gfm'
      }
      {
        match: '!?(\\[)([^\\]]*)(\\])((\\()[^\\)]+(\\)))'
        name: 'link'
        captures:
          '1':
            name: 'punctuation.definition.begin.gfm'
          '2':
            name: 'entity.gfm'
          '3':
            name: 'punctuation.definition.end.gfm'
          '4':
            name: 'markup.underline.link.gfm'
          '5':
            name: 'punctuation.definition.begin.gfm'
          '6':
            name: 'punctuation.definition.end.gfm'
      }
      {
        match: '!?(\\[)([^\\]]*)(\\])((\\[)[^\\]]*(\\]))'
        name: 'link'
        captures:
          '1':
            name: 'punctuation.definition.begin.gfm'
          '2':
            name: 'entity.gfm'
          '3':
            name: 'punctuation.definition.end.gfm'
          '4':
            name: 'markup.underline.link.gfm'
          '5':
            name: 'punctuation.definition.begin.gfm'
          '6':
            name: 'punctuation.definition.end.gfm'
      }
      {
        match: '^\\s*(\\[)([^\\]]+)(\\])\\s*:\\s*<([^>]+)>'
        name: 'link'
        captures:
          '1':
            name: 'punctuation.definition.begin.gfm'
          '2':
            name: 'entity.gfm'
          '3':
            name: 'punctuation.definition.end.gfm'
          '4':
            name: 'markup.underline.link.gfm'
      }
      {
        match: '^\\s*(\\[)([^\\]]+)(\\])\\s*(:)\\s*(\\S+)'
        name: 'link'
        captures:
          '1':
            name: 'punctuation.definition.begin.gfm'
          '2':
            name: 'entity.gfm'
          '3':
            name: 'punctuation.definition.end.gfm'
          '4':
            name: 'punctuation.separator.key-value.gfm'
          '5':
            name: 'markup.underline.link.gfm'
      }
      {
        match: '\\\\.'
        name: 'constant.character.escape.gfm'
        order: 0
      }
      {
        match: '(&)[a-zA-Z0-9]+(;)'
        name: 'constant.character.entity.gfm'
        captures:
          '1':
            name: 'punctuation.definition.entity.gfm'
          '2':
            name: 'punctuation.definition.entity.gfm'
        order: 0
      }
      {
        match: '(&)#[0-9]+(;)'
        name: 'constant.character.entity.gfm'
        captures:
          '1':
            name: 'punctuation.definition.entity.gfm'
          '2':
            name: 'punctuation.definition.entity.gfm'
        order: 0
      }
      {
        match: '(&)#x[0-9a-fA-F]+(;)'
        name: 'constant.character.entity.gfm'
        captures:
          '1':
            name: 'punctuation.definition.entity.gfm'
          '2':
            name: 'punctuation.definition.entity.gfm'
        order: 0
      }
    ]
  'block-no-emphasis':
    patterns: [
      {
        include: '#code'
      }
      {
        include: '#footnotes'
      }
      {
        include: '#html-block'
      }
      {
        include: '#list-definitions'
      }
      {
        include: '#math-block'
      }
      {
        include: '#code-block'
      }
      {
        begin: '\\A---$'
        end: '^(---|\\.\\.\\.)$'
        captures:
          '0':
            name: 'comment.hr.gfm'
        name: 'front-matter.yaml.gfm'
        patterns: [
          {
            include: 'source.yaml'
          }
        ]
        order: 0
      }
      {
        begin: '^\\s*(>)'
        end: '^\\s*?$'
        beginCaptures:
          '1':
            name: 'support.quote.gfm'
        name: 'comment.quote.gfm'
        patterns: [
          {
            include: '$self'
          }
        ]
        order: 0
      }
      {
        begin: '<!--'
        captures:
          '0':
            name: 'punctuation.definition.comment.gfm'
        end: '--\\s*>'
        name: 'comment.block.gfm'
        order: 0
      }
      {
        begin: '^\\|'
        end: '(\\|)?\\s*$'
        beginCaptures:
          '0':
            name: 'border.pipe.outer'
        endCaptures:
          '1':
            name: 'border.pipe.outer'
        name: 'table.gfm'
        patterns: [
          {
            match: '(:?)(-+)(:?)'
            captures:
              '1':
                name: 'border.alignment'
              '2':
                name: 'border.header'
              '3':
                name: 'border.alignment'
          }
          {
            match: '\\|'
            name: 'border.pipe.inner'
          }
        ]
        order: 0
      }
      {
        begin: '{\\+\\+'
        end: '\\+\\+}'
        name: 'critic.gfm.addition'
        captures:
          '0':
            name: 'critic.gfm.addition.marker'
        order: 0
      }
      {
        begin: '{--'
        end: '--}'
        name: 'critic.gfm.deletion'
        captures:
          '0':
            name: 'critic.gfm.deletion.marker'
        order: 0
      }
      {
        begin: '{=='
        end: '==}'
        name: 'critic.gfm.highlight'
        captures:
          '0':
            name: 'critic.gfm.highlight.marker'
        order: 0
      }
      {
        begin: '{>>'
        end: '<<}'
        name: 'critic.gfm.comment'
        captures:
          '0':
            name: 'critic.gfm.comment.marker'
        order: 0
      }
      {
        begin: '{~~'
        end: '~~}'
        name: 'critic.gfm.substitution'
        captures:
          '0':
            name: 'critic.gfm.substitution.marker'
        patterns: [
          {
            match: '~>'
            name: 'critic.gfm.substitution.operator'
          }
        ]
        order: 0
      }
    ]
  citations:
    patterns: [
      {
        name: 'markup.citation.pfm'
        match: '(\\[)(.*?-?@[A-z_][\\w:.#$%&\\-+?<>~/]*.*?[^\\\\])(\\])'
        captures:
          '1':
            name: 'support.gfm'
          '2':
            patterns: [
              {
                include: '#citation-internal'
              }
              {
                include: '#inline'
              }
            ]
          '3':
            name: 'support.gfm'
      }
      {
        name: 'markup.citation.pfm'
        match: '(@[A-z_][\\w:.#$%&\\-+?<>~/]*?\\s*(\\[).*?(\\]))'
        captures:
          '0':
            patterns: [
              {
                include: '#citation-internal'
              }
              {
                include: '#inline'
              }
            ]
          '1':
            name: 'support.gfm'
          '2':
            name: 'support.gfm'
      }
      {
        include: '#citation-internal'
      }
    ]
  'citation-internal':
    patterns: [
      {
        match: '(-?@)([A-z_][\\w:.#$%&\\-+?<>~/]*)'
        captures:
          '1':
            name: 'variable.mention.gfm'
          '2':
            name: 'string.username.gfm'
      }
    ]
  'emphasis-block':
    patterns: [
      {
        include: '#bold-italic-block'
      }
      {
        include: '#bold-block'
      }
      {
        include: '#italic-block'
      }
    ]
  'bold-italic-block':
    patterns: [
      {
        begin: '^(\\*\\*\\*)(?!\\*|\\s)'
        end: '(\\1)|^$'
        name: 'markup.bold.italic.gfm'
        patterns: [
          {
            include: '#math-block'
          }
          {
            include: '#inline'
          }
        ]
      }
    ]
  'bold-block':
    patterns: [
      {
        begin: '^(\\*\\*)(?!\\*|\\s)'
        end: '(\\1)|^$'
        name: 'markup.bold.gfm'
        patterns: [
          {
            include: '#math-block'
          }
          {
            include: '#italic-block'
          }
          {
            include: '#inline'
          }
        ]
      }
    ]
  'italic-block':
    patterns: [
      {
        begin: '^(\\*)(?!\\*|\\s)'
        end: '(\\1)(?!\\*)|^$'
        name: 'markup.italic.gfm'
        patterns: [
          {
            include: '#math-block'
          }
          {
            include: '#bold-block'
          }
          {
            include: '#inline'
          }
        ]
      }
    ]
  'emphasis-inline':
    patterns: [
      {
        include: '#bold-italic-inline'
      }
      {
        include: '#bold-inline'
      }
      {
        include: '#italic-inline'
      }
    ]
  'bold-italic-inline':
    patterns: [
      {
        match: '(?<=[^\\w\\d\\\\_])(___)([^\\s_\\\\]|[^\\s_][^_\\\\]|\\\\{2}|[^\\s_].+?[^_\\\\])(\\1)(?=[^\\w\\d]|_|$)'
        name: 'markup.inline.bold.italic.gfm'
        captures:
          '2':
            patterns: [
              {
                include: '#inline-no-emphasis'
              }
            ]
      }
      {
        match: '(?<=[^\\*\\\\])(\\*{3})([^\\s\\*\\\\]|[^\\s\\*][^\\*\\\\]|\\\\{2}|[^\\s\\*].+?[^\\*\\\\])(\\1)'
        name: 'markup.inline.bold.italic.gfm'
        captures:
          '2':
            patterns: [
              {
                include: '#inline-no-emphasis'
              }
            ]
      }
    ]
  'bold-inline':
    patterns: [
      {
        match: '(?<=[^\\w\\d\\\\]|_)(__)([^\\s_\\\\]|[^\\s_][^_\\\\]|\\\\{2}|[^\\s_].+?[^_\\\\])(\\1)(?=[^\\w\\d]|_|$)'
        name: 'markup.inline.bold.gfm'
        captures:
          '2':
            patterns: [
              {
                include: '#inline-no-emphasis'
              }
              {
                include: '#italic-inline'
              }
            ]
      }
      {
        match: '(?<!\\\\)(\\*{2})([^\\s\\*\\\\]|[^\\s\\*][^\\*\\\\]|\\\\{2}|[^\\s\\*].+?[^\\*\\\\])(\\1)'
        name: 'markup.inline.bold.gfm'
        captures:
          '2':
            patterns: [
              {
                include: '#inline-no-emphasis'
              }
              {
                include: '#bold-inline'
              }
            ]
      }
    ]
  'italic-inline':
    patterns: [
      {
        match: '(?<=[^\\w\\d_\\\\]{2}|__)(_)([^\\s_\\\\]|[^\\s_][^\\\\_]|\\\\{2}|[^\\s_].+?[^_\\\\])(\\1)(?=[^\\w\\d_]|$|_{2,})'
        name: 'markup.inline.italic.gfm'
        captures:
          '2':
            patterns: [
              {
                include: '#inline-no-emphasis'
              }
              {
                include: '#bold-inline'
              }
            ]
      }
      {
        match: '(?<=[^\\*\\\\]{2}|\\*\\*)(\\*)([^\\s\\*\\\\]|[^\\s\\*][^\\*\\\\]|\\\\{2}|[^\\s\\*].+?[^\\*\\\\])(\\1)(?=[^\\*]|\\*{2,}|$)'
        name: 'markup.inline.italic.gfm'
        captures:
          '2':
            patterns: [
              {
                include: '#inline-no-emphasis'
              }
              {
                include: '#bold-inline'
              }
            ]
      }
    ]
  footnotes:
    patterns: [
      {
        name: 'markup.footnote.reference.pfm'
        match: '(\\[\\^)([\\S]+)(\\])(?!:)'
        captures:
          '1':
            name: 'support.gfm'
          '2':
            name: 'support.gfm'
          '3':
            name: 'support.gfm'
      }
      {
        name: 'markup.footnote.inline.pfm'
        match: '(\\^\\[)([^\\^].+|\\^\\S.+)(\\])'
        captures:
          '1':
            name: 'support.gfm'
          '2':
            patterns: [
              {
                include: '$self'
              }
            ]
          '3':
            name: 'support.gfm'
      }
    ]
  'html-block':
    patterns: [
      {
        begin: '<!{0}\\s*([\\w]+)[^>]*\\s*>'
        beginCaptures:
          '0':
            name: 'source.html.basic'
            patterns: [
              {
                include: 'text.html.basic'
              }
            ]
        end: '<\\s*[/]?\\1\\s*>'
        endCaptures:
          '0':
            name: 'source.html.basic'
            patterns: [
              {
                include: 'text.html.basic'
              }
            ]
        contentName: 'source.html.basic'
        patterns: [
          {
            include: '$self'
          }
        ]
      }
    ]
  'list-definitions':
    patterns: [
      {
        name: 'markup.definition.block.pfm'
        begin: '^[:~]   |^ [:~]  |^  [:~] '
        beginCaptures:
          '0':
            name: 'support.gfm'
        end: '^(?= {0,3}\\S+.+$)'
        endCaptures:
          '0':
            name: 'support.gfm'
        contentName: 'markup.definition.content.pfm'
        patterns: [
          {
            include: '$self'
          }
        ]
      }
    ]
  'math-syntax':
    patterns: [
      {
        captures:
          '1':
            name: 'punctuation.definition.constant.math.tex'
        match: '(\\\\)(s(s(earrow|warrow|lash)|h(ort(downarrow|uparrow|parallel|leftarrow|rightarrow|mid)|arp)|tar|i(gma|m(eq)?)|u(cc(sim|n(sim|approx)|curlyeq|eq|approx)?|pset(neq(q)?|plus(eq)?|eq(q)?)?|rd|m|bset(neq(q)?|plus(eq)?|eq(q)?)?)|p(hericalangle|adesuit)|e(tminus|arrow)|q(su(pset(eq)?|bset(eq)?)|c(up|ap)|uare)|warrow|m(ile|all(s(etminus|mile)|frown)))|h(slash|ook(leftarrow|rightarrow)|eartsuit|bar)|R(sh|ightarrow|e|bag)|Gam(e|ma)|n(s(hort(parallel|mid)|im|u(cc(eq)?|pseteq(q)?|bseteq))|Rightarrow|n(earrow|warrow)|cong|triangle(left(eq(slant)?)?|right(eq(slant)?)?)|i(plus)?|u|p(lus|arallel|rec(eq)?)|e(q|arrow|g|xists)|v(dash|Dash)|warrow|le(ss|q(slant|q)?|ft(arrow|rightarrow))|a(tural|bla)|VDash|rightarrow|g(tr|eq(slant|q)?)|mid|Left(arrow|rightarrow))|c(hi|irc(eq|le(d(circ|S|dash|ast)|arrow(left|right)))?|o(ng|prod|lon|mplement)|dot(s|p)?|u(p|r(vearrow(left|right)|ly(eq(succ|prec)|vee(downarrow|uparrow)?|wedge(downarrow|uparrow)?)))|enterdot|lubsuit|ap)|Xi|Maps(to(char)?|from(char)?)|B(ox|umpeq|bbk)|t(h(ick(sim|approx)|e(ta|refore))|imes|op|wohead(leftarrow|rightarrow)|a(u|lloblong)|riangle(down|q|left(eq(slant)?)?|right(eq(slant)?)?)?)|i(n(t(er(cal|leave))?|plus|fty)?|ota|math)|S(igma|u(pset|bset))|zeta|o(slash|times|int|dot|plus|vee|wedge|lessthan|greaterthan|m(inus|ega)|b(slash|long|ar))|d(i(v(ideontimes)?|a(g(down|up)|mond(suit)?)|gamma)|o(t(plus|eq(dot)?)|ublebarwedge|wn(harpoon(left|right)|downarrows|arrow))|d(ots|agger)|elta|a(sh(v|leftarrow|rightarrow)|leth|gger))|Y(down|up|left|right)|C(up|ap)|u(n(lhd|rhd)|p(silon|harpoon(left|right)|downarrow|uparrows|lus|arrow)|lcorner|rcorner)|jmath|Theta|Im|p(si|hi|i(tchfork)?|erp|ar(tial|allel)|r(ime|o(d|pto)|ec(sim|n(sim|approx)|curlyeq|eq|approx)?)|m)|e(t(h|a)|psilon|q(slant(less|gtr)|circ|uiv)|ll|xists|mptyset)|Omega|D(iamond|ownarrow|elta)|v(d(ots|ash)|ee(bar)?|Dash|ar(s(igma|u(psetneq(q)?|bsetneq(q)?))|nothing|curly(vee|wedge)|t(heta|imes|riangle(left|right)?)|o(slash|circle|times|dot|plus|vee|wedge|lessthan|ast|greaterthan|minus|b(slash|ar))|p(hi|i|ropto)|epsilon|kappa|rho|bigcirc))|kappa|Up(silon|downarrow|arrow)|Join|f(orall|lat|a(t(s(emi|lash)|bslash)|llingdotseq)|rown)|P(si|hi|i)|w(p|edge|r)|l(hd|n(sim|eq(q)?|approx)|ceil|times|ightning|o(ng(left(arrow|rightarrow)|rightarrow|maps(to|from))|zenge|oparrow(left|right))|dot(s|p)|e(ss(sim|dot|eq(qgtr|gtr)|approx|gtr)|q(slant|q)?|ft(slice|harpoon(down|up)|threetimes|leftarrows|arrow(t(ail|riangle))?|right(squigarrow|harpoons|arrow(s|triangle|eq)?))|adsto)|vertneqq|floor|l(c(orner|eil)|floor|l|bracket)?|a(ngle|mbda)|rcorner|bag)|a(s(ymp|t)|ngle|pprox(eq)?|l(pha|eph)|rrownot|malg)|V(dash|vdash)|r(h(o|d)|ceil|times|i(singdotseq|ght(s(quigarrow|lice)|harpoon(down|up)|threetimes|left(harpoons|arrows)|arrow(t(ail|riangle))?|rightarrows))|floor|angle|r(ceil|parenthesis|floor|bracket)|bag)|g(n(sim|eq(q)?|approx)|tr(sim|dot|eq(qless|less)|less|approx)|imel|eq(slant|q)?|vertneqq|amma|g(g)?)|Finv|xi|m(ho|i(nuso|d)|o(o|dels)|u(ltimap)?|p|e(asuredangle|rge)|aps(to|from(char)?))|b(i(n(dnasrepma|ampersand)|g(s(tar|qc(up|ap))|nplus|c(irc|u(p|rly(vee|wedge))|ap)|triangle(down|up)|interleave|o(times|dot|plus)|uplus|parallel|vee|wedge|box))|o(t|wtie|x(slash|circle|times|dot|plus|empty|ast|minus|b(slash|ox|ar)))|u(llet|mpeq)|e(cause|t(h|ween|a))|lack(square|triangle(down|left|right)?|lozenge)|a(ck(s(im(eq)?|lash)|prime|epsilon)|r(o|wedge))|bslash)|L(sh|ong(left(arrow|rightarrow)|rightarrow|maps(to|from))|eft(arrow|rightarrow)|leftarrow|ambda|bag)|Arrownot)\\b'
        name: 'constant.character.math.tex'
      }
      {
        captures:
          '1':
            name: 'punctuation.definition.constant.math.tex'
        match: '(\\\\)(sum|prod|coprod|int|oint|bigcap|bigcup|bigsqcup|bigvee|bigwedge|bigodot|bigotimes|bogoplus|biguplus)\\b'
        name: 'constant.character.math.tex'
      }
      {
        captures:
          '1':
            name: 'punctuation.definition.constant.math.tex'
        match: '(\\\\)(arccos|arcsin|arctan|arg|cos|cosh|cot|coth|csc|deg|det|dim|exp|gcd|hom|inf|ker|lg|lim|liminf|limsup|ln|log|max|min|pr|sec|sin|sinh|sup|tan|tanh)\\b'
        name: 'constant.other.math.tex'
      }
      {
        begin: '((\\\\)Sexpr(\\{))'
        beginCaptures:
          '1':
            name: 'support.function.sexpr.math.tex'
          '2':
            name: 'punctuation.definition.function.math.tex'
          '3':
            name: 'punctuation.section.embedded.begin.math.tex'
        contentName: 'support.function.sexpr.math.tex'
        end: '(((\\})))'
        endCaptures:
          '1':
            name: 'support.function.sexpr.math.tex'
          '2':
            name: 'punctuation.section.embedded.end.math.tex'
          '3':
            name: 'source.r'
        name: 'meta.embedded.line.r'
        patterns: [
          {
            begin: '\\G(?!\\})'
            end: '(?=\\})'
            name: 'source.r'
            patterns: [
              {
                include: 'source.r'
              }
            ]
          }
        ]
      }
      {
        captures:
          '1':
            name: 'punctuation.definition.constant.math.tex'
        match: '(\\\\)([^a-zA-Z]|[A-Za-z]+)(?=\\b|\\}|\\]|\\^|\\_)'
        name: 'constant.other.general.math.tex'
      }
      {
        match: '(([0-9]*[\\.][0-9]+)|[0-9]+)'
        name: 'constant.numeric.math.tex'
      }
      {
        match: '«press a-z and space for greek letter»[a-zA-Z]*'
        name: 'meta.placeholder.greek.math.tex'
      }
      {
        match: '(?<!\\\\)[{}]'
        name: 'punctuation.definition.arguments'
      }
    ]
  'math-block':
    patterns: [
      {
        name: 'markup.math.block.pfm'
        begin: '(\\${2})'
        beginCaptures:
          '0':
            name: 'support.gfm'
        end: '\\1'
        endCaptures:
          '0':
            name: 'support.gfm'
        patterns: [
          {
            include: '#math-syntax'
          }
        ]
      }
      {
        name: 'markup.math.block.pfm'
        begin: '(?<!\\\\)\\\\\\['
        beginCaptures:
          '0':
            name: 'support.gfm'
        end: '\\\\\\]'
        endCaptures:
          '0':
            name: 'support.gfm'
        patterns: [
          {
            include: '#math'
          }
        ]
      }
    ]
  'math-inline':
    patterns: [
      {
        name: 'markup.math.inline.pfm'
        match: '(?<!\\$)(\\$)([^$\\s][^$]+[^\\\\$\\s]|[^\\\\$\\s]+)(\\$)'
        captures:
          '1':
            name: 'support.gfm'
          '2':
            patterns: [
              {
                include: '#math-syntax'
              }
            ]
          '3':
            name: 'support.gfm'
      }
      {
        name: 'markup.math.inline.pfm'
        match: '(\\\\\\()([\\S][^)]+)(\\\\\\))'
        captures:
          '1':
            name: 'support.gfm'
          '2':
            patterns: [
              {
                include: '#math-syntax'
              }
            ]
          '3':
            name: 'support.gfm'
      }
    ]
  'code-inline':
    patterns: [
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.coffee-?(?:script)?[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.coffee'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.coffee.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.(?:javascript|js)[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.js'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.js.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.(apib|apiblueprint)[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'text.html.markdown.source.gfm.apib'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.mson[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'text.html.markdown.source.gfm.mson'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.(?:markdown|mdown|md)[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: '$self'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.json[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.json'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.json.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.css[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.css'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.css.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.less[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.less.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.xml[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'text.xml'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.xml.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.(?:ruby|rb)[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.ruby'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.ruby.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.java[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.java'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.java.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.erlang[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.erlang'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.erlang.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.go(?:lang)?[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.go'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.go.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.cs(?:harp)?[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.cs'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.cs.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.php[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.php'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.php.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.(?:sh|bash)[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.shell'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.shell.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.py(?:thon)?[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.python'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.python.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.c[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.c'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.c.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.c(?:pp|\\+\\+)[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.cpp'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.cpp.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.(?:objc|objective-c)[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.objc'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.objc.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.haskell[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.haskell'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.haskell.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.html[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'text.html.basic'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.html.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.(?:la)?tex[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'text.tex.latex'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.latex.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.ya?ml[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.yaml'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.yaml.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.elixir[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.elixir'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.elixir.gfm'
      }
      {
        match: '(`+)(.+)\\1\\s*(\\{.*\\.(?:diff|patch|rej)[^\\}]*\\})'
        captures:
          '2':
            patterns: [
              {
                include: 'source.diff'
              }
            ]
          '3':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        name: 'markup.code.diff.gfm'
      }
      {
        begin: '(`+)(?!$)'
        end: '\\1'
        name: 'markup.raw.gfm'
      }
    ]
  'code-block':
    patterns: [
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:coffee-?(?:script)?)|(\\{.*\\.coffee-?(?:script)?[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.coffee.gfm'
        patterns: [
          {
            include: 'source.coffee'
          }
        ]
        contentName: 'source.coffee'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:(?:javascript|js))|(\\{.*\\.(?:javascript|js)[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.js.gfm'
        patterns: [
          {
            include: 'source.js'
          }
        ]
        contentName: 'source.js'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:(apib|apiblueprint))|(\\{.*\\.(apib|apiblueprint)[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.gfm'
        patterns: [
          {
            include: 'text.html.markdown.source.gfm.apib'
          }
        ]
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:mson)|(\\{.*\\.mson[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.gfm'
        patterns: [
          {
            include: 'text.html.markdown.source.gfm.mson'
          }
        ]
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:(?:markdown|mdown|md))|(\\{.*\\.(?:markdown|mdown|md)[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.gfm'
        patterns: [
          {
            include: '$self'
          }
        ]
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:json)|(\\{.*\\.json[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.json.gfm'
        patterns: [
          {
            include: 'source.json'
          }
        ]
        contentName: 'source.json'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:css)|(\\{.*\\.css[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.css.gfm'
        patterns: [
          {
            include: 'source.css'
          }
        ]
        contentName: 'source.css'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:less)|(\\{.*\\.less[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.less.gfm'
        patterns: [
          {
            include: 'source.css.less'
          }
        ]
        contentName: 'source.css.less'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:xml)|(\\{.*\\.xml[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.xml.gfm'
        patterns: [
          {
            include: 'text.xml'
          }
        ]
        contentName: 'text.xml'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:(?:ruby|rb))|(\\{.*\\.(?:ruby|rb)[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.ruby.gfm'
        patterns: [
          {
            include: 'source.ruby'
          }
        ]
        contentName: 'source.ruby'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:java)|(\\{.*\\.java[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.java.gfm'
        patterns: [
          {
            include: 'source.java'
          }
        ]
        contentName: 'source.java'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:erlang)|(\\{.*\\.erlang[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.erlang.gfm'
        patterns: [
          {
            include: 'source.erlang'
          }
        ]
        contentName: 'source.erlang'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:go(?:lang)?)|(\\{.*\\.go(?:lang)?[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.go.gfm'
        patterns: [
          {
            include: 'source.go'
          }
        ]
        contentName: 'source.go'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:cs(?:harp)?)|(\\{.*\\.cs(?:harp)?[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.cs.gfm'
        patterns: [
          {
            include: 'source.cs'
          }
        ]
        contentName: 'source.cs'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:php)|(\\{.*\\.php[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.php.gfm'
        patterns: [
          {
            include: 'source.php'
          }
        ]
        contentName: 'source.php'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:(?:sh|bash))|(\\{.*\\.(?:sh|bash)[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.shell.gfm'
        patterns: [
          {
            include: 'source.shell'
          }
        ]
        contentName: 'source.shell'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:py(?:thon)?)|(\\{.*\\.py(?:thon)?[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.python.gfm'
        patterns: [
          {
            include: 'source.python'
          }
        ]
        contentName: 'source.python'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:c)|(\\{.*\\.c[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.c.gfm'
        patterns: [
          {
            include: 'source.c'
          }
        ]
        contentName: 'source.c'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:c(?:pp|\\+\\+))|(\\{.*\\.c(?:pp|\\+\\+)[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.cpp.gfm'
        patterns: [
          {
            include: 'source.cpp'
          }
        ]
        contentName: 'source.cpp'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:(?:objc|objective-c))|(\\{.*\\.(?:objc|objective-c)[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.objc.gfm'
        patterns: [
          {
            include: 'source.objc'
          }
        ]
        contentName: 'source.objc'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:haskell)|(\\{.*\\.haskell[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.haskell.gfm'
        patterns: [
          {
            include: 'source.haskell'
          }
        ]
        contentName: 'source.haskell'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:html)|(\\{.*\\.html[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.html.gfm'
        patterns: [
          {
            include: 'text.html.basic'
          }
        ]
        contentName: 'source.html.basic'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:(?:la)?tex)|(\\{.*\\.(?:la)?tex[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.latex.gfm'
        patterns: [
          {
            include: 'text.tex.latex'
          }
        ]
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:ya?ml)|(\\{.*\\.ya?ml[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.yaml.gfm'
        patterns: [
          {
            include: 'source.yaml'
          }
        ]
        contentName: 'source.yaml'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:elixir)|(\\{.*\\.elixir[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.elixir.gfm'
        patterns: [
          {
            include: 'source.elixir'
          }
        ]
        contentName: 'source.elixir'
      }
      {
        begin: '^\\s*(((`|~){3,})\\s*(?:(?:(?:diff|patch|rej))|(\\{.*\\.(?:diff|patch|rej)[^\\}]*\\}))\\s*)$'
        beginCaptures:
          '1':
            name: 'support.gfm'
          '4':
            patterns: [
              {
                include: 'source.css.less'
              }
            ]
        end: '^\\s*\\2\\3*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.code.diff.gfm'
        patterns: [
          {
            include: 'source.diff'
          }
        ]
        contentName: 'source.diff'
      }
      {
        begin: '^\\s*((`|~){3,})\\s*.*\\s*$'
        beginCaptures:
          '0':
            name: 'support.gfm'
        end: '^\\s*\\1\\2*$'
        endCaptures:
          '0':
            name: 'support.gfm'
        name: 'markup.raw.gfm'
      }
    ]
  headings:
    patterns: [
      {
        begin: '^(#{6})(\\s*)'
        end: '$'
        name: 'markup.heading.heading-6.gfm'
        captures:
          '1':
            name: 'markup.heading.marker.gfm'
          '2':
            name: 'markup.heading.space.gfm'
        patterns: [
          {
            include: '#inline'
          }
        ]
      }
      {
        begin: '^(#{5})(\\s*)'
        end: '$'
        name: 'markup.heading.heading-5.gfm'
        captures:
          '1':
            name: 'markup.heading.marker.gfm'
          '2':
            name: 'markup.heading.space.gfm'
        patterns: [
          {
            include: '#inline'
          }
        ]
      }
      {
        begin: '^(#{4})(\\s*)'
        end: '$'
        name: 'markup.heading.heading-4.gfm'
        captures:
          '1':
            name: 'markup.heading.marker.gfm'
          '2':
            name: 'markup.heading.space.gfm'
        patterns: [
          {
            include: '#inline'
          }
        ]
      }
      {
        begin: '^(#{3})(\\s*)'
        end: '$'
        name: 'markup.heading.heading-3.gfm'
        captures:
          '1':
            name: 'markup.heading.marker.gfm'
          '2':
            name: 'markup.heading.space.gfm'
        patterns: [
          {
            include: '#inline'
          }
        ]
      }
      {
        begin: '^(#{2})(\\s*)'
        end: '$'
        name: 'markup.heading.heading-2.gfm'
        captures:
          '1':
            name: 'markup.heading.marker.gfm'
          '2':
            name: 'markup.heading.space.gfm'
        patterns: [
          {
            include: '#inline'
          }
        ]
      }
      {
        begin: '^(#{1})(\\s*)'
        end: '$'
        name: 'markup.heading.heading-1.gfm'
        captures:
          '1':
            name: 'markup.heading.marker.gfm'
          '2':
            name: 'markup.heading.space.gfm'
        patterns: [
          {
            include: '#inline'
          }
        ]
      }
    ]
  code:
    patterns:
      inline: [
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.coffee-?(?:script)?[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.coffee'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.coffee.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.(?:javascript|js)[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.js'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.js.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.(apib|apiblueprint)[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'text.html.markdown.source.gfm.apib'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.mson[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'text.html.markdown.source.gfm.mson'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.(?:markdown|mdown|md)[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: '$self'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.json[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.json'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.json.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.css[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.css'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.css.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.less[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.less.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.xml[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'text.xml'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.xml.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.(?:ruby|rb)[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.ruby'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.ruby.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.java[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.java'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.java.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.erlang[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.erlang'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.erlang.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.go(?:lang)?[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.go'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.go.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.cs(?:harp)?[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.cs'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.cs.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.php[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.php'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.php.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.(?:sh|bash)[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.shell'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.shell.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.py(?:thon)?[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.python'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.python.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.c[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.c'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.c.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.c(?:pp|\\+\\+)[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.cpp'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.cpp.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.(?:objc|objective-c)[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.objc'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.objc.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.haskell[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.haskell'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.haskell.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.html[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'text.html.basic'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.html.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.(?:la)?tex[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'text.tex.latex'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.latex.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.ya?ml[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.yaml'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.yaml.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.elixir[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.elixir'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.elixir.gfm'
        }
        {
          match: '(`+)(.+)\\1\\s*(\\{.*\\.(?:diff|patch|rej)[^\\}]*\\})'
          captures:
            '2':
              patterns: [
                {
                  include: 'source.diff'
                }
              ]
            '3':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          name: 'markup.code.diff.gfm'
        }
        {
          begin: '(`+)(?!$)'
          end: '\\1'
          name: 'markup.raw.gfm'
        }
      ]
      block: [
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:coffee-?(?:script)?)|(\\{.*\\.coffee-?(?:script)?[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.coffee.gfm'
          patterns: [
            {
              include: 'source.coffee'
            }
          ]
          contentName: 'source.coffee'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:(?:javascript|js))|(\\{.*\\.(?:javascript|js)[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.js.gfm'
          patterns: [
            {
              include: 'source.js'
            }
          ]
          contentName: 'source.js'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:(apib|apiblueprint))|(\\{.*\\.(apib|apiblueprint)[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.gfm'
          patterns: [
            {
              include: 'text.html.markdown.source.gfm.apib'
            }
          ]
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:mson)|(\\{.*\\.mson[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.gfm'
          patterns: [
            {
              include: 'text.html.markdown.source.gfm.mson'
            }
          ]
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:(?:markdown|mdown|md))|(\\{.*\\.(?:markdown|mdown|md)[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.gfm'
          patterns: [
            {
              include: '$self'
            }
          ]
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:json)|(\\{.*\\.json[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.json.gfm'
          patterns: [
            {
              include: 'source.json'
            }
          ]
          contentName: 'source.json'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:css)|(\\{.*\\.css[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.css.gfm'
          patterns: [
            {
              include: 'source.css'
            }
          ]
          contentName: 'source.css'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:less)|(\\{.*\\.less[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.less.gfm'
          patterns: [
            {
              include: 'source.css.less'
            }
          ]
          contentName: 'source.css.less'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:xml)|(\\{.*\\.xml[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.xml.gfm'
          patterns: [
            {
              include: 'text.xml'
            }
          ]
          contentName: 'text.xml'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:(?:ruby|rb))|(\\{.*\\.(?:ruby|rb)[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.ruby.gfm'
          patterns: [
            {
              include: 'source.ruby'
            }
          ]
          contentName: 'source.ruby'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:java)|(\\{.*\\.java[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.java.gfm'
          patterns: [
            {
              include: 'source.java'
            }
          ]
          contentName: 'source.java'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:erlang)|(\\{.*\\.erlang[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.erlang.gfm'
          patterns: [
            {
              include: 'source.erlang'
            }
          ]
          contentName: 'source.erlang'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:go(?:lang)?)|(\\{.*\\.go(?:lang)?[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.go.gfm'
          patterns: [
            {
              include: 'source.go'
            }
          ]
          contentName: 'source.go'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:cs(?:harp)?)|(\\{.*\\.cs(?:harp)?[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.cs.gfm'
          patterns: [
            {
              include: 'source.cs'
            }
          ]
          contentName: 'source.cs'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:php)|(\\{.*\\.php[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.php.gfm'
          patterns: [
            {
              include: 'source.php'
            }
          ]
          contentName: 'source.php'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:(?:sh|bash))|(\\{.*\\.(?:sh|bash)[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.shell.gfm'
          patterns: [
            {
              include: 'source.shell'
            }
          ]
          contentName: 'source.shell'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:py(?:thon)?)|(\\{.*\\.py(?:thon)?[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.python.gfm'
          patterns: [
            {
              include: 'source.python'
            }
          ]
          contentName: 'source.python'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:c)|(\\{.*\\.c[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.c.gfm'
          patterns: [
            {
              include: 'source.c'
            }
          ]
          contentName: 'source.c'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:c(?:pp|\\+\\+))|(\\{.*\\.c(?:pp|\\+\\+)[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.cpp.gfm'
          patterns: [
            {
              include: 'source.cpp'
            }
          ]
          contentName: 'source.cpp'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:(?:objc|objective-c))|(\\{.*\\.(?:objc|objective-c)[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.objc.gfm'
          patterns: [
            {
              include: 'source.objc'
            }
          ]
          contentName: 'source.objc'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:haskell)|(\\{.*\\.haskell[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.haskell.gfm'
          patterns: [
            {
              include: 'source.haskell'
            }
          ]
          contentName: 'source.haskell'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:html)|(\\{.*\\.html[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.html.gfm'
          patterns: [
            {
              include: 'text.html.basic'
            }
          ]
          contentName: 'source.html.basic'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:(?:la)?tex)|(\\{.*\\.(?:la)?tex[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.latex.gfm'
          patterns: [
            {
              include: 'text.tex.latex'
            }
          ]
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:ya?ml)|(\\{.*\\.ya?ml[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.yaml.gfm'
          patterns: [
            {
              include: 'source.yaml'
            }
          ]
          contentName: 'source.yaml'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:elixir)|(\\{.*\\.elixir[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.elixir.gfm'
          patterns: [
            {
              include: 'source.elixir'
            }
          ]
          contentName: 'source.elixir'
        }
        {
          begin: '^\\s*(((`|~){3,})\\s*(?:(?:(?:diff|patch|rej))|(\\{.*\\.(?:diff|patch|rej)[^\\}]*\\}))\\s*)$'
          beginCaptures:
            '1':
              name: 'support.gfm'
            '4':
              patterns: [
                {
                  include: 'source.css.less'
                }
              ]
          end: '^\\s*\\2\\3*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.code.diff.gfm'
          patterns: [
            {
              include: 'source.diff'
            }
          ]
          contentName: 'source.diff'
        }
        {
          begin: '^\\s*((`|~){3,})\\s*.*\\s*$'
          beginCaptures:
            '0':
              name: 'support.gfm'
          end: '^\\s*\\1\\2*$'
          endCaptures:
            '0':
              name: 'support.gfm'
          name: 'markup.raw.gfm'
        }
      ]